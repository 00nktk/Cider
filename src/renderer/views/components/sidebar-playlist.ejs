<script type="text/x-template" id="sidebar-playlist">
    <div class="sidebar-playlist">
        <button class="app-sidebar-item" :key="item.id" v-if="item.type != 'library-playlist-folders'"
                :class="{'active': $root.page.includes(item.id)}"
                @contextmenu="$root.playlistContextMenu($event, item.id)"
                @dragover="()=>{}"
                :href="item.href"
                @click='$root.appRoute(`playlist_` + item.id); $root.showingPlaylist = [];$root.getPlaylistFromID($root.page.substring(9))'>
            {{ item.attributes.name }}
        </button>
        <button class="app-sidebar-item" :key="item.id" v-else
                :class="[{'folder-button-active': folderOpened}, isPlaylistSelected]"
                @contextmenu="$root.playlistContextMenu($event, item.id)"
                @dragover="()=>{}"
                :href="item.href"
                @click='getPlaylistChildren(item)'>
            <span v-if="!folderOpened">📁</span>
            <span v-else>📂</span>
            {{ item.attributes.name }}
        </button>
        <div class="folder-body" v-if="item.type === 'library-playlist-folders' && folderOpened">
            <template v-if="children.length != 0">
                <sidebar-playlist v-for="item in children" :item="item" :key="item.id"></sidebar-playlist>
            </template>
            <template v-else>
                <div class="spinner"></div>
            </template>
        </div>
    </div>
</script>

<script>
    Vue.component('sidebar-playlist', {
        template: '#sidebar-playlist',
        props: {
            item: {
                type: Object,
                required: true
            }
        },
        data: function () {
            return {
                folderOpened: false,
                children: []
            }
        },
        methods: {
            getPlaylistChildren(item) {
                let self = this
                this.toggleFolder()
                this.$root.mk.api.library.playlistFolderChildren(item.id).then(children => {
                    self.children = children
                    self.children.sort((a, b) => {
                        if (a.type === 'library-playlist-folders' && b.type !== 'library-playlist-folders') {
                            return -1
                        } else if (a.type !== 'library-playlist-folders' && b.type === 'library-playlist-folders') {
                            return 1
                        } else {
                            return 0
                        }
                    })
                })
            },
            isPlaylistSelected(item) {
                if(this.$root.showingPlaylist.id == item.id) {
                    return ["active"]
                }  else {
                    return []
                }
            },
            toggleFolder() {
                this.folderOpened = !this.folderOpened;
            }
        }
    });
</script>