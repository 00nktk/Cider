<script type="text/x-template" id="mediaitem-square">
    <div tabindex="0"
         class="cd-mediaitem-square" :class="getClasses()" @contextmenu="contextMenu"
         v-observe-visibility="{callback: visibilityChanged}">
        <template v-if="isVisible">
            <div class="artwork-container">
                <div class="artwork" @click='app.routeView(item)'>
                    <mediaitem-artwork
                            :url="getArtworkUrl()"
                            :video="(item.attributes != null && item.attributes.editorialVideo != null) ? (item.attributes.editorialVideo.motionDetailSquare ? item.attributes.editorialVideo.motionDetailSquare.video : (item.attributes.editorialVideo.motionSquareVideo1x1 ? item.attributes.editorialVideo.motionSquareVideo1x1.video : '')) : '' "
                            :size="size"
                            shadow="subtle"
                            :type="item.type"></mediaitem-artwork>
                </div>
                <button class="menu-btn" v-if="!nomenu.includes(item.type)"
                        @click="contextMenu"><%- include("../svg/more.svg") %></button>
                <button class="play-btn" v-if="!noplay.includes(item.type)"
                        @click="app.playMediaItem(item)"><%- include("../svg/play.svg") %></button>
                <div class="badge-container" v-if="itemBadges.length != 0">
                    <div class="socialBadge" v-for="badge in itemBadges.limit(1)">
                        <mediaitem-artwork
                                :url="badge.attributes.artwork.url"
                                :size="32"></mediaitem-artwork>
                    </div>
                </div>
            </div>
            <div class="title item-navigate text-overflow-elipsis" @click.self='app.routeView(item)'>
                {{ item.attributes.name }}
            </div>
            <div class="subtitle item-navigate text-overflow-elipsis" @click="app.searchAndNavigate(item,'artist')"
                 v-if="item.attributes.artistName">
                {{ item.attributes.artistName }}
            </div>
            <div class="subtitle" v-else>&nbsp;</div>
        </template>
    </div>
</script>

<script>
    Vue.component('mediaitem-square', {
        template: '#mediaitem-square',
        props: {
            item: {
                type: Object,
                required: true
            },
            kind: {
                type: String,
                default: ''
            },
            size: {
                type: String,
                default: '300'
            },
            'contextExt': {type: Object, required: false},
        },
        data: function () {
            return {
                isVisible: false,
                addedToLibrary: false,
                guid: this.uuidv4(),
                noplay: ["apple-curators"],
                nomenu: ["artists", "stations", "apple-curators"],
                app: this.$root,
                badges: this.$root.socialBadges.badgeMap,
                itemBadges: []
            }
        },
        async mounted() {
            await this.getBadges()
        },
        methods: {
            async getBadges() {
                let self = this
                if(this.badges[this.item.attributes.playParams.id ?? this.item.id]) {
                    let friends = this.badges[this.item.attributes.playParams.id ?? this.item.id]
                    if(friends) {
                        friends.forEach(function (friend) {
                            self.app.mk.api.socialProfile(friend).then(data => {
                                self.itemBadges.push(data)
                            })
                        })
                    }
                }
            },
            revisedRandId() {
                return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
            },
            async isInLibrary() {
                if (this.item.type && !this.item.type.includes("library")) {
                    var params = {
                        "fields[playlists]": "inLibrary",
                        "fields[albums]": "inLibrary",
                        "relate": "library",
                        "extend": this.revisedRandId()
                    }
                    var res = await app.mkapi(this.item.attributes.playParams.kind ?? this.item.type, this.item.attributes.playParams.isLibrary ?? false, this.item.attributes.playParams.id ?? this.item.id, params);
                    this.addedToLibrary = (res && res.attributes && res.attributes.inLibrary) ? res.attributes.inLibrary : false
                } else {
                    this.addedToLibrary = true
                }
            },
            async removeFromLibrary(id) {
                var params = {
                    "fields[playlists]": "inLibrary",
                    "fields[songs]": "inLibrary",
                    "fields[albums]": "inLibrary",
                    "relate": "library",
                    "extend": this.revisedRandId()
                }
                var id = this.item.id ?? this.item.attributes.playParams.id
                var res = await app.mkapi(this.item.attributes.playParams.kind ?? this.item.type, this.item.attributes.playParams.isLibrary ?? false, this.item.attributes.playParams.id ?? this.item.id, params);
                if (res && res.relationships && res.relationships.library && res.relationships.library.data && res.relationships.library.data.length > 0) {
                    id = res.relationships.library.data[0].id
                }
                let kind = this.item.attributes.playParams.kind ?? this.item.type ?? '';
                var truekind = (!kind.endsWith("s")) ? (kind + "s") : kind;
                app.mk.api.library.remove({[truekind]: id})
                this.addedToLibrary = true
            },
            uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            },
            getArtworkUrl() {
                let artwork = this.item.attributes.artwork ? this.item.attributes.artwork.url : ''
                switch (this.kind) {
                    case "385":
                        artwork = this.item.attributes.editorialArtwork.subscriptionHero.url
                        break;
                }
                return artwork
            },
            getClasses() {
                let type = this.item.type
                if (this.kind != "") {
                    type = this.kind
                }
                switch (type) {
                    default:
                        return []
                        break;
                    case "385": // editorial
                        return ["mediaitem-brick"]
                        break;
                    case "small":
                        return ["mediaitem-small"]
                        break;
                    case "music-videos":
                    case "uploadedVideo":
                    case "uploaded-videos":
                        return "mediaitem-video";
                        break;
                }
            },
            visibilityChanged: function (isVisible, entry) {
                this.isVisible = isVisible
            },
            async contextMenu(event) {
                if (this.nomenu.includes(this.item.type)) {
                    return
                }
                if (!event) {
                    event = this.$refs.main
                } else {
                    console.log(event)
                }
                await this.isInLibrary();
                let self = this
                let useMenu = "normal"
                if (app.selectedMediaItems.length <= 1) {
                    app.selectedMediaItems = []
                    app.select_selectMediaItem(this.item.attributes.playParams.id ?? this.item.id, this.item.attributes.playParams.kind ?? this.item.type, this.index, this.guid)
                } else {
                    useMenu = "multiple"
                }
                let menus = {
                    multiple: {
                        items: [
                            {
                                name: `Play ${app.selectedMediaItems.length} tracks next`,
                                action: () => {
                                    let itemsToPlay = {}
                                    app.selectedMediaItems.forEach(item => {
                                        if (!itemsToPlay[item.kind]) {
                                            itemsToPlay[item.kind] = []
                                        }
                                        itemsToPlay[item.kind].push(item.id)
                                    })
                                    // loop through itemsToPlay
                                    for (let kind in itemsToPlay) {
                                        let ids = itemsToPlay[kind]
                                        if (ids.length > 0) {
                                            app.mk.playNext({[kind + "s"]: itemsToPlay[kind]})
                                        }
                                    }
                                    console.log(itemsToPlay)
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                name: `Play ${app.selectedMediaItems.length} tracks later`,
                                action: () => {
                                    let itemsToPlay = {}
                                    app.selectedMediaItems.forEach(item => {
                                        if (!itemsToPlay[item.kind]) {
                                            itemsToPlay[item.kind] = []
                                        }
                                        itemsToPlay[item.kind].push(item.id)
                                    })
                                    // loop through itemsToPlay
                                    for (let kind in itemsToPlay) {
                                        let ids = itemsToPlay[kind]
                                        if (ids.length > 0) {
                                            app.mk.playLater({[kind + "s"]: itemsToPlay[kind]})
                                        }
                                    }
                                    app.selectedMediaItems = []
                                }
                            },
                        ]
                    },
                    normal: {
                        items: [
                            {
                                "name": "Play Next",
                                "action": function () {
                                    app.mk.playNext({[self.item.attributes.playParams.kind ?? self.item.type]: self.item.attributes.playParams.id ?? self.item.id})
                                    app.mk.queue._reindex()
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                "name": "Play Later",
                                "action": function () {
                                    app.mk.playLater({[self.item.attributes.playParams.kind ?? self.item.type]: self.item.attributes.playParams.id ?? self.item.id})
                                    app.mk.queue._reindex()
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                "id": "addToPlaylist",
                                "name": "Add to Playlist...",
                                "action": function () {
                                    app.promptAddToPlaylist()
                                }
                            },
                            {
                                "name": (this.addedToLibrary) ? "Remove from Library..." : "Add to Library...",
                                "action": async function () {
                                    let item_id = self.item.attributes.playParams.id ?? self.item.id;
                                    let data_type = self.item.attributes.playParams.kind ?? self.item.type;
                                    if (self.addedToLibrary != true) {
                                        console.log("add");
                                        app.addToLibrary(item_id);
                                        self.addedToLibrary = true
                                    } else {
                                        console.log("remove");
                                        await self.removeFromLibrary(item_id);
                                        self.addedToLibrary = false
                                    }
                                    ;
                                }
                            },
                            {
                                "name": "Share",
                                "action": function () {
                                    self.app.copyToClipboard(self.item.attributes.url)
                                }
                            }
                        ]
                    }
                }
                if ((self.item.attributes.playParams.kind ?? self.item.type).includes("playlist")) {
                    // remove the add to playlist option by id "addToPlaylist" using the .filter() method
                    menus.normal.items = menus.normal.items.filter(function (item) {
                        return item.id != "addToPlaylist"
                    })
                }
                if (this.contextExt) {
                    if (this.contextExt.normal) {
                        menus.normal.items = menus.normal.items.concat(this.contextExt.normal)
                    }
                    if (this.contextExt.multiple) {
                        menus.multiple.items = menus.multiple.items.concat(this.contextExt.multiple)
                    }
                }
                CiderContextMenu.Create(event, menus[useMenu])
            },
        },
        beforeDestroy: function () {
            this.item = null;
            this.kind = null;
            this.size = null;
        }
    });
</script>