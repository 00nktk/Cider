<script type="text/x-template" id="libraryartist-item">
    <div v-observe-visibility="{callback: visibilityChanged}"
       
         @click="select"
         :data-id="item.id"
         :data-type="artists"
         :data-index="index"
         :data-guid="guid"
         :data-islibrary="true"
         class="cd-mediaitem-list-item"
         :class="{'mediaitem-selected': app.select_hasMediaItem(guid)}">
        <template v-if="isVisible">
            <!-- <div class="isLibrary" v-if="showLibraryStatus == true">
                <button @click="addToLibrary()"
                        v-if="!app.isInLibrary(item.attributes.playParams) && !addedToLibrary">üñ§
                </button>
                <button v-else @click="removeFromLibrary()">‚ù§Ô∏è</button>
            </div> -->
            <div class="artwork" v-if="showArtwork == true">
                <mediaitem-artwork
                        :url="item.attributes.artwork ? item.attributes.artwork.url : ''"
                        size="50"
                        :type="item.type"></mediaitem-artwork>
                <button class="overlay-play" @click="playTrack()"><%- include("../svg/play.svg") %></button>
            </div>
            <div class="info-rect" :style="{'padding-left': (showArtwork ? '' : '16px')}"
                 @dblclick="app.routeView(item)">
                <div class="title text-overflow-elipsis">
                    {{ item.attributes.name }}
                </div>
                <div class="subtitle text-overflow-elipsis" style="-webkit-box-orient: horizontal;">
                    <template v-if="item.attributes.name">
                        <div class="artist item-navigate text-overflow-elipsis"
                             @click="app.searchAndNavigate(item,'artist')">
                            {{ item.attributes.artistName }}
                        </div>
                        <!-- <template v-if="item.attributes.albumName">&nbsp;-&nbsp;</template>
                        <template v-if="item.attributes.albumName">
                            <div class="artist item-navigate text-overflow-elipsis"
                             //    @click="app.searchAndNavigate(item,'album')"
                                 >
                                {{ item.attributes.albumName }}
                            </div>
                        </template> -->
                    </template>
                </div>
            </div>
            <!-- <div class="content-rating" v-if="item.attributes.contentRating" @dblclick="app.routeView(item)">
                {{ item.attributes.contentRating }}
            </div>
            <template v-if="showMetaData == true" @dblclick="app.routeView(item)">
                <div class="metainfo">
                    {{ item.attributes.releaseDate ? new Date(item.attributes.releaseDate).toLocaleDateString()
                    : "" }}
                </div>
                <div class="metainfo">
                    {{ item.attributes.genreNames[0] ?? "" }}
                </div>
            </template>
            <div class="duration" v-if="showDuration" @dblclick="app.routeView(item)">
                {{ msToMinSec(item.attributes.durationInMillis ?? 0) }}
            </div> -->
        </template>
    </div>
</script>

<script>
    Vue.component('libraryartist-item', {
        template: '#libraryartist-item',
        data: function () {
            return {
                isVisible: false,
                addedToLibrary: false,
                guid: this.uuidv4(),
                app: this.$root
            }
        },
        props: {
            'item': {type: Object, required: true},
            'parent': {type: String, required: false},
            'index': {type: Number, required: false, default: -1},
            'show-artwork': {type: Boolean, default: true},
            'show-library-status': {type: Boolean, default: true},
            'show-meta-data': {type: Boolean, default: false},
            'show-duration': {type: Boolean, default: true},
            'contextExt': {type: Object, required: false},
        },
        methods: {
            uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            },
            msToMinSec(ms) {
                var minutes = Math.floor(ms / 60000);
                var seconds = ((ms % 60000) / 1000).toFixed(0);
                return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
            },
            getDataType() {
                if (this.item.attributes.playParams.isLibrary) {
                    return this.item.type
                } else {
                    return this.item.attributes.playParams.kind
                }
            },
            select(e) {
               let u = this.item
               u.attributes.playParams = {id : this.id, kind: "artists", isLibrary: true}
               app.routeView(u)
            },
            contextMenu(event) {
                let self = this
                let data_type = this.getDataType()
                let item_id = this.item.attributes.playParams.id ?? this.item.id
                let isLibrary = this.item.attributes.playParams.isLibrary ?? false

                let useMenu = "normal"
                if (app.selectedMediaItems.length <= 1) {
                    app.selectedMediaItems = []
                    app.select_selectMediaItem(item_id, data_type, this.index, this.guid, isLibrary)
                } else {
                    useMenu = "multiple"
                }
                let menus = {
                    multiple: {
                        items: [
                            {
                                "name": "Add to Playlist...",
                                "action": function () {
                                    app.promptAddToPlaylist()
                                }
                            },
                            {
                                name: `Play ${app.selectedMediaItems.length} tracks next`,
                                action: () => {
                                    let itemsToPlay = {}
                                    app.selectedMediaItems.forEach(item => {
                                        if (!itemsToPlay[item.kind]) {
                                            itemsToPlay[item.kind] = []
                                        }
                                        itemsToPlay[item.kind].push(item.id)
                                    })
                                    // loop through itemsToPlay
                                    for (let kind in itemsToPlay) {
                                        let ids = itemsToPlay[kind]
                                        if (ids.length > 0) {
                                            app.mk.playNext({[kind + "s"]: itemsToPlay[kind]})
                                        }
                                    }
                                    console.log(itemsToPlay)
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                name: `Play ${app.selectedMediaItems.length} tracks later`,
                                action: () => {
                                    let itemsToPlay = {}
                                    app.selectedMediaItems.forEach(item => {
                                        if (!itemsToPlay[item.kind]) {
                                            itemsToPlay[item.kind] = []
                                        }
                                        itemsToPlay[item.kind].push(item.id)
                                    })
                                    // loop through itemsToPlay
                                    for (let kind in itemsToPlay) {
                                        let ids = itemsToPlay[kind]
                                        if (ids.length > 0) {
                                            app.mk.playLater({[kind + "s"]: itemsToPlay[kind]})
                                        }
                                    }
                                    app.selectedMediaItems = []
                                }
                            },
                        ]
                    },
                    normal: {
                        items: [
                            {
                                "name": "Add to Playlist...",
                                "action": function () {
                                    app.promptAddToPlaylist()
                                }
                            },
                            {
                                "name": "Start Radio",
                                "action": function () {
                                    app.mk.setStationQueue({song: self.item.attributes.playParams.id ?? self.item.id}).then(() => {
                                        app.mk.play()
                                        app.selectedMediaItems = []
                                    })
                                }
                            },
                            {
                                "name": "Play Next",
                                "action": function () {
                                    app.mk.playNext({[self.item.attributes.playParams.kind ?? self.item.type]: self.item.attributes.playParams.id ?? self.item.id})
                                    app.mk.queue._reindex()
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                "name": "Play Later",
                                "action": function () {
                                    app.mk.playLater({[self.item.attributes.playParams.kind ?? self.item.type]: self.item.attributes.playParams.id ?? self.item.id})
                                    app.mk.queue._reindex()
                                    app.selectedMediaItems = []
                                }
                            },
                            {
                                "name": "Go to Artist",
                                "action": function () {
                                    app.searchAndNavigate(self.item, 'artist')
                                }
                            },
                            {
                                "name": "Go to Album",
                                "action": function () {
                                    app.searchAndNavigate(self.item, 'album')
                                }
                            },
                        ]
                    }
                }
                if (this.contextExt) {
                    // if this.context-ext.normal is true append all options to the 'normal' menu which is a kvp of arrays
                    if (this.contextExt.normal) {
                        menus.normal.items = menus.normal.items.concat(this.contextExt.normal)
                    }
                    if (this.contextExt.multiple) {
                        menus.multiple.items = menus.multiple.items.concat(this.contextExt.multiple)
                    }
                }
                CiderContextMenu.Create(event, menus[useMenu])
            },
            visibilityChanged: function (isVisible, entry) {
                this.isVisible = isVisible
            },
            addToLibrary() {
                let item = this.item
                if (item.attributes.playParams.id) {
                    console.log('adding to library', item.attributes.playParams.id)
                    app.addToLibrary(item.attributes.playParams.id.toString())
                    this.addedToLibrary = true
                } else if (item.id) {
                    console.log('adding to library', item.id)
                    app.addToLibrary(item.id.toString())
                    this.addedToLibrary = true
                }
            },
            async removeFromLibrary() {
                let item = this.item
                let params = {"fields[songs]": "inLibrary", "fields[albums]": "inLibrary", "relate": "library"}
                let id = item.id ?? item.attributes.playParams.id
                let res = await app.mkapi(item.attributes.playParams.kind ?? item.type, item.attributes.playParams.isLibrary ?? false, item.attributes.playParams.id ?? item.id, params);
                if (res && res.relationships && res.relationships.library && res.relationships.library.data && res.relationships.library.data.length > 0) {
                    id = res.relationships.library.data[0].id
                }
                let kind = this.item.attributes.playParams.kind ?? this.data.item ?? '';
                let truekind = (!kind.endsWith("s")) ? (kind + "s") : kind;
                if (item.attributes.playParams.id) {
                    console.log('remove from library', id)
                    app.removeFromLibrary(truekind, id)
                    this.addedToLibrary = false
                } else if (item.id) {
                    console.log('remove from library', id)
                    app.removeFromLibrary(truekind, id)
                    this.addedToLibrary = false
                }
            },
            playTrack() {
                let item = this.item
                let parent = this.parent
                let childIndex = this.index
                console.log(item, parent, childIndex)
                if (parent != null && childIndex != null) {
                    app.queueParentandplayChild(parent, childIndex, item);
                } else {
                    app.playMediaItemById(item.attributes.playParams.id ?? item.id, item.attributes.playParams.kind ?? item.type, item.attributes.playParams.isLibrary ?? false, item.attributes.url)
                }
            }
        }
    });
</script>