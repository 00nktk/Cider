<script type="text/x-template" id="cider-menu-panel">
    <div class="menu-panel" @click.self="menuPanel.visible = false" >

    <div class="menu-panel-body">
        <div class="menu-header-text" v-if="content.name != ''">
            <div class="row">
                <div class="col">
                    <h3 class="queue-header-text">{{ content.name }}</h3>
                </div>
            </div>
        </div>
        <div class="menu-header-body" v-if="Object.keys(content.headerItems).length != 0">
            <template v-for="item in content.headerItems">
                <button class="menu-option-header" :title="item.name" v-if="canDisplay(item)" :style="getStyle(item)" @click="action(item)">
                    <div class="sidebar-icon" style="margin: 0;" v-if="item.icon">
                        <div class="svg-icon" :style="{'--url': 'url(' + item.icon + ')'}"></div>
                    </div>
                </button>
            </template>
        </div>
        <div class="menu-body">
            <template v-for="item in content.items">
                <button class="menu-option" v-if="canDisplay(item)" :style="getStyle(item)" @click="action(item)">
                    <div class="sidebar-icon" v-if="item.icon">
                        <div class="svg-icon" :style="{'--url': 'url(' + item.icon + ')'}"></div>
                    </div>
                    {{ item.name }}
                </button>
            </template>
        </div>
    </div>
    </div>
</script>


<script>
    Vue.component('cider-menu-panel', {
        template: '#cider-menu-panel',
        data: function () {
            return {
                app: this.$root,
                menuPanel: this.$root.menuPanel,
                content: this.$root.menuPanel.content,
                getSvgIcon: this.$root.getSvgIcon,
            }
        },
        mounted() {
        },
        methods: {
            getStyle(item) {
                if(item["disabled"]) {
                    return {
                        "pointer-events": "none",
                        "opacity": "0.5",
                    }
                }
            },
            canDisplay(item) {
                if(!item["hidden"]) {
                    return true
                }else{
                    return false
                }
            },
            async getActions() {
                return this.content.items;
            },
            action(item) {
                item.action()
                if(!item["keepOpen"]) {
                    this.menuPanel.visible = false
                }
            }
        }
    });
</script>