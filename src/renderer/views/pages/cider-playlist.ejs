<script type="text/x-template" id="cider-playlist">
    <template>
        <div class="content-inner playlist-page" v-if="data != [] && data.attributes != null" :style="{'--bgColor': (data.attributes.artwork != null && data.attributes.artwork['bgColor'] != null) ? ('#' + data.attributes.artwork.bgColor) : ''}">
            <template v-if="app.playlists.loadingState == 0">
                <div class="content-inner centered">Loading...</div>
            </template>
            <template v-if="app.playlists.loadingState == 1">
            <div class="playlist-display row"
                 :style="{
                background: (data.attributes.artwork != null && data.attributes.artwork['bgColor'] != null) ? ('#' + data.attributes.artwork.bgColor) : '',
                color: (data.attributes.artwork != null && data.attributes.artwork['textColor1'] != null) ? ('#' + data.attributes.artwork.textColor1) : ''
            }">
                <div class="col-auto flex-center">
                    <div style="width: 260px;height:260px;">
                        <mediaitem-artwork
                                :url="(data.attributes != null && data.attributes.artwork && data.attributes.artwork != null) ? data.attributes.artwork.url : ((data.relationships != null && data.relationships.tracks.data.length > 0) ? data.relationships.tracks.data[0].attributes.artwork.url ?? '':'')"
                                :video="(data.attributes != null && data.attributes.editorialVideo != null) ? (data.attributes.editorialVideo.motionDetailSquare ? data.attributes.editorialVideo.motionDetailSquare.video : (data.attributes.editorialVideo.motionSquareVideo1x1 ? data.attributes.editorialVideo.motionSquareVideo1x1.video : '')) : '' "
                                size="260"
                        ></mediaitem-artwork>
                    </div>
                </div>
                <div class="col playlist-info">
                    <template v-if="!editorialNotesExpanded">
                        <div>
                            <div class="playlist-name">{{data.attributes ? (data.attributes.name ??
                                (data.attributes.title ?? '') ?? '') : ''}}
                            </div>
                            <div class="playlist-artist item-navigate" v-if="data.attributes && data.attributes.artistName" @click="if(data.attributes && data.attributes.artistName){ app.searchAndNavigate(data,'artist')}">
                                {{data.attributes ? (data.attributes.artistName ?? '') :''}}
                            </div>
                            <div class="playlist-desc" v-if="data.attributes.editorialNotes">
                                <div class="content"
                                     v-html="((data.attributes.editorialNotes) ? (data.attributes.editorialNotes.standard ?? (data.attributes.editorialNotes.short ?? '') ) : (data.attributes.description ? (data.attributes.description.standard ?? (data.attributes.description.short ?? '')) : ''))"></div>
                                <button class="more-btn" @click="editorialNotesExpanded = !editorialNotesExpanded">
                                    More
                                </button>
                            </div>
                        </div>
                    </template>
                    <template v-if="editorialNotesExpanded">
                        <div class="playlist-desc-expanded">
                            <div class="content"
                                 v-html="((data.attributes.editorialNotes) ? (data.attributes.editorialNotes.standard ?? (data.attributes.editorialNotes.short ?? '') ) : (data.attributes.description ? (data.attributes.description.standard ?? (data.attributes.description.short ?? '')) : ''))"></div>
                            <button class="more-btn" @click="editorialNotesExpanded = !editorialNotesExpanded">Less
                            </button>
                        </div>
                    </template>
                    <div class="playlist-controls">
                        <button class="wr-btn" style="min-width: 120px;"
                                @click="app.mk.shuffleMode = 0;app.playMediaItemById(data.attributes.playParams.id ?? data.id, data.attributes.playParams.kind ?? data.type, data.attributes.playParams.isLibrary ?? false, data.attributes.url)">
                            Play
                        </button>
                        <button class="wr-btn" style="min-width: 120px;"
                                @click="app.mk.shuffleMode = 1;app.playMediaItemById(data.attributes.playParams.id ?? data.id, data.attributes.playParams.kind ?? data.type, data.attributes.playParams.isLibrary ?? false, data.attributes.url)">
                            Shuffle
                        </button>
                    </div>
                </div>
            </div>
            <div class="playlist-body">
                <div class="well">
                    <div style="width:100%">
                        <draggable :sort="data.attributes.canEdit" v-model="data.relationships.tracks.data" @start="drag=true" @end="drag=false;put()">
                            <mediaitem-list-item :item="item" :parent="getItemParent(data)" :index="index" :context-ext="buildContextMenu()"
                                                 v-for="(item,index) in data.relationships.tracks.data"></mediaitem-list-item>
                        </draggable>
                    </div>

                </div>
                <div class="playlist-time"> 
                    {{data.attributes.releaseDate}}
                </div>
                <div class="playlist-time item-navigate" @click="app.searchAndNavigate(data,'recordLabel') " style="width: 50%;"> 
                    {{data.attributes.copyright}}
                </div>
                <div class="playlist-time">{{app.getTotalTime()}}</div>
            </div>
        </template>
    </div>
</template>

</script>
<script>
    Vue.component('cider-playlist', {
        template: "#cider-playlist",
        props: ["data"],
        data: function () {
            return {
                editorialNotesExpanded: false,
                drag: false
            }
        },
        mounted() {

        },
        methods: {
            buildContextMenu (index) {
                let self = this
                if(!this.data.attributes.canEdit) {
                    return
                }
                return {
                    normal: [
                        {
                            name: 'Remove from Playlist',
                            action: () => {
                                self.remove()
                            }
                        },
                    ],
                    multiple: [
                        {
                            name: 'Remove selected tracks from Playlist',
                            action: () => {
                                self.remove()
                            }
                        },
                    ]
                }
            },
            async put() {
                if(!this.data.attributes.canEdit) {
                    return
                }
                await app.mk.api.library.putPlaylistTracklisting(this.data.attributes.playParams.id, this.convert())
            },
            async remove () {
                if(!this.data.attributes.canEdit) {
                    return
                }
                // for each app.selectedMediaItems splice the items from the playlist
                for(let i = 0; i < app.selectedMediaItems.length; i++) {
                    let item = app.selectedMediaItems[i]
                    let index = this.data.relationships.tracks.data.findIndex(x => x.id == item.id)
                    if(index > -1) {
                        this.data.relationships.tracks.data.splice(index, 1)
                    }
                }
                await this.put()
            },
            convert() {
                let pl_tracks = []
                for (let i = 0; i < this.data.relationships.tracks.data.length; i++) {
                    pl_tracks.push({
                        id: this.data.relationships.tracks.data[i].id,
                        type: this.data.relationships.tracks.data[i].type
                    })
                }
                return pl_tracks
            },
            getRecursive(url) {
                app.apiCall(app.musicBaseUrl + "/v1/me/library/playlists/p.V7VYlrDso6kkYY/tracks?offset=100", res => {
                    this.data.relationships.tracks.data = this.data.relationships.tracks.data.concat(res.data.data)
                    if (res.data.next) {
                        this.getRecursive(res.data.next)
                    }
                })
            },
            getItemParent: function (data) {
                kind = data.attributes.playParams.kind;
                id = data.attributes.playParams.id;
                return `${kind}:${id}`
            }
        }
    })
</script>